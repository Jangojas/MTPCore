<?xml version="1.0"?>
<doc>
<assembly>
<name>
MFMarathon
</name>
</assembly>
<members>
<member name="P:Inertia.MFMarathon.DataType.MarathonBoolean.Value">
	<summary>
 Value attribute of the data
 </summary>
</member><member name="T:Inertia.MFMarathon.DataType.MarathonBoolean">
	<summary>
 MarathonTP Boolean Datatype
 </summary>
	<remarks>Based on .NET Boolean datatype</remarks>
</member><member name="P:Inertia.MFMarathon.DataType.MarathonInteger.Value">
	<summary>
 Value attribute of the data
 </summary>
</member><member name="T:Inertia.MFMarathon.DataType.MarathonInteger">
	<summary>
 MarathonTP Integer Datatype
 </summary>
	<remarks>Based on .NET Integer datatype</remarks>
</member><member name="P:Inertia.MFMarathon.DataType.MarathonShort.Value">
	<summary>
 Value attribute of the data
 </summary>
</member><member name="T:Inertia.MFMarathon.DataType.MarathonShort">
	<summary>
 MarathonTP Short Datatype
 </summary>
	<remarks>Based on .NET Short datatype</remarks>
</member><member name="P:Inertia.MFMarathon.DataType.MarathonUShort.Value">
	<summary>
 Value attribute of the data
 </summary>
</member><member name="T:Inertia.MFMarathon.DataType.MarathonUShort">
	<summary>
 MarathonTP Unsigned Short Datatype
 </summary>
	<remarks>Based on .NET UShort datatype</remarks>
</member><member name="P:Inertia.MFMarathon.DataType.MarathonLong.Value">
	<summary>
 Value attribute of the data
 </summary>
</member><member name="T:Inertia.MFMarathon.DataType.MarathonLong">
	<summary>
 MarathonTP Long Datatype
 </summary>
	<remarks>Based on .NET Long datatype</remarks>
</member><member name="P:Inertia.MFMarathon.DataType.MarathonSingle.Value">
	<summary>
 Value attribute of the data
 </summary>
</member><member name="T:Inertia.MFMarathon.DataType.MarathonSingle">
	<summary>
 MarathonTP Single Datatype
 </summary>
	<remarks>Based on .NET Single datatype</remarks>
</member><member name="P:Inertia.MFMarathon.DataType.MarathonDouble.Value">
	<summary>
 Value attribute of the data
 </summary>
</member><member name="T:Inertia.MFMarathon.DataType.MarathonDouble">
	<summary>
 MarathonTP Double Datatype
 </summary>
	<remarks>Based on .NET Double datatype</remarks>
</member><member name="P:Inertia.MFMarathon.DataType.MarathonByte.Value">
	<summary>
 Value attribute of the data
 </summary>
</member><member name="T:Inertia.MFMarathon.DataType.MarathonByte">
	<summary>
 MarathonTP Byte Datatype
 </summary>
	<remarks>Based on .NET Byte datatype</remarks>
</member><member name="P:Inertia.MFMarathon.DataType.MarathonString.Value">
	<summary>
 Value attribute of the data
 </summary>
	<remarks>Cannot contains MarathonTP reserved characters : "{, }, :"</remarks>
</member><member name="T:Inertia.MFMarathon.DataType.MarathonString">
	<summary>
 MarathonTP String Datatype
 </summary>
	<remarks>Based on .NET String datatype</remarks>
</member><member name="F:Inertia.MFMarathon.Common.MessageSeparator">
	<summary>
 UTF-16 code of item separator
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.RequestCode">
	<summary>
 UTF-16 code of request code
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.AnswerCode">
	<summary>
 UTF-16 code of answer code
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.Default_UDP_port">
	<summary>
 Default MarathonTP UDP port
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MarathonBoolean">
	<summary>
 String representation of MarathonTP Boolean datatype
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MarathonInteger">
	<summary>
 String representation of MarathonTP Integer datatype
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MarathonShort">
	<summary>
 String representation of MarathonTP Short datatype
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MarathonUShort">
	<summary>
 String representation of MarathonTP UShort datatype
 </summary>
</member><member name="F:Inertia.MFMarathon.Common.MarathonLong">
	<summary>
 String representation of MarathonTP Long datatype
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MarathonSingle">
	<summary>
 String representation of MarathonTP Single datatype
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MarathonDouble">
	<summary>
 String representation of MarathonTP Double datatype
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MarathonByte">
	<summary>
 String representation of MarathonTP Byte datatype
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MarathonString">
	<summary>
 String representation of MarathonTP String datatype
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MarathonNil">
	<summary>
 String representation of MarathonTP NULL datatype
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.STX">
	<summary>
 Beginning of message symbol
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.ETX">
	<summary>
 End of message symbol
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.DIV">
	<summary>
 Item separator
 </summary>
	<remarks></remarks>
</member><member name="T:Inertia.MFMarathon.Common.MarathonVersion">
	<summary>
 Available versions
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.MessageCodes.ReadVariables">
	<summary>
 Used to read tag(s) value(s) on remote device
 </summary>
</member><member name="F:Inertia.MFMarathon.Common.MessageCodes.WriteVariables">
	<summary>
 Used to write value(s) in tag(s) on remote device
 </summary>
</member><member name="F:Inertia.MFMarathon.Common.MessageCodes.Discovery">
	<summary>
 Used to Ping remote device
 </summary>
</member><member name="T:Inertia.MFMarathon.Common.MessageCodes">
	<summary>
 Available message codes
 </summary>
</member><member name="F:Inertia.MFMarathon.Common.ErrorCodes.OperationSuccessful">
	<summary>
 The message is successfully processed
 </summary>
</member><member name="F:Inertia.MFMarathon.Common.ErrorCodes.ElementNotFound">
	<summary>
 The specified item does not exist
 </summary>
</member><member name="F:Inertia.MFMarathon.Common.ErrorCodes.IncompatibleData">
	<summary>
 The datatype is incompatible
 </summary>
</member><member name="F:Inertia.MFMarathon.Common.ErrorCodes.IndexOutOfRange">
	<summary>
 The specified index is out of range
 </summary>
</member><member name="T:Inertia.MFMarathon.Common.ErrorCodes">
	<summary>
 Available error codes
 </summary>
</member><member name="M:Inertia.MFMarathon.Common.Versioning(System.Int32)">
	<summary>
 Return a string that contain protocol version
 </summary>
	<param name="Version"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.Common.aCRC16Table">
	<summary>
 Table to calculate a CRC
 </summary>
	<remarks></remarks>
</member><member name="M:Inertia.MFMarathon.Common.CalculateCRC16(System.Byte[])">
	<summary>
 Calculate a CRC
 </summary>
	<param name="DataInput">Bytes array containing a complete MarathonTP message frame</param>
	<returns>Calculated CRC</returns>
</member><member name="T:Inertia.MFMarathon.Common">
	<summary>
 Provide access to global definition
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1.VER">
 MarathonTP protocol version

</member><member name="F:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1.CMD">
 MarathonTP command type

</member><member name="F:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1.RA">
 MarathonTP message type code

</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1.TNS">
	<summary>
 MarathonTP message transaction number
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1.ELE">
	<summary>
 MarathonTP element(s) to read
 </summary>
	<remarks>Can be TAG or index, but must be all the same method.</remarks>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1.STAMP">
	<summary>
 MarathonTP message Timestamp for tracking and retries
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1.RETRIES">
	<summary>
 Number of send retries
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1.SENDONCE">
	<summary>
 Is to be retried
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1.EP">
	<summary>
 MarathonTP remote device end point
 </summary>
	<remarks>Defined by an address and a UDP port.</remarks>
</member><member name="T:Inertia.MFMarathon.UDPPackets.Request.ReadVariablesPacketV1_1">
	<summary>
 Value reading request definition.
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1.VER">
	<summary>
 MarathonTP protocol version
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1.RA">
	<summary>
 MarathonTP message type code
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1.TNS">
	<summary>
 MarathonTP message transaction number
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1.CMD">
	<summary>
 MarathonTP command type
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1.PAIR">
	<summary>
 MarathonTP elements to write on
 </summary>
	<remarks>Must be a combination of an element (TAG or index) and a value.</remarks>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1.STAMP">
	<summary>
 MarathonTP message Timestamp for tracking and retries
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1.RETRIES">
	<summary>
 Number of send retries
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1.SENDONCE">
	<summary>
 Is to be retried
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1.EP">
	<summary>
 MarathonTP remote device end point
 </summary>
	<remarks>Defined by an address and a UDP port.</remarks>
</member><member name="T:Inertia.MFMarathon.UDPPackets.Request.WriteVariablesPacketV1_1">
	<summary>
 Value writing request definition.
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.DiscoverPacketV1_1.VER">
	<summary>
 MarathonTP protocol version
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.DiscoverPacketV1_1.RA">
	<summary>
 MarathonTP message type code
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.DiscoverPacketV1_1.TNS">
	<summary>
 MarathonTP message transaction number
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.DiscoverPacketV1_1.CMD">
	<summary>
 MarathonTP command type
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.DiscoverPacketV1_1.ELE">
	<summary>
 MarathonTP Element index
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Request.DiscoverPacketV1_1.EP">
	<summary>
 MarathonTP remote device end point
 </summary>
	<remarks>Defined by an address and a UDP port.</remarks>
</member><member name="T:Inertia.MFMarathon.UDPPackets.Request.DiscoverPacketV1_1">
	<summary>
 Discover request definition.
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ReturnedVariablesPacketV1_1.VER">
	<summary>
 MarathonTP protocol version
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ReturnedVariablesPacketV1_1.RA">
	<summary>
 MarathonTP message type code
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ReturnedVariablesPacketV1_1.TNS">
	<summary>
 MarathonTP message transaction number
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ReturnedVariablesPacketV1_1.CMD">
	<summary>
 MarathonTP command type
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ReturnedVariablesPacketV1_1.PAIR">
	<summary>
 MarathonTP data value list
 </summary>
	<remarks>Represented by a combination of error code, datatype and value.</remarks>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ReturnedVariablesPacketV1_1.EP">
	<summary>
 MarathonTP remote device end point
 </summary>
	<remarks>Defined by an address and a UDP port.</remarks>
</member><member name="T:Inertia.MFMarathon.UDPPackets.Answer.ReturnedVariablesPacketV1_1">
	<summary>
 Value reading answer definition.
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ResponseGenericPacketV1_1.VER">
	<summary>
 MarathonTP protocol version
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ResponseGenericPacketV1_1.RA">
	<summary>
 MarathonTP message type code
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ResponseGenericPacketV1_1.TNS">
	<summary>
 MarathonTP message transaction number
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ResponseGenericPacketV1_1.CMD">
	<summary>
 MarathonTP command type
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ResponseGenericPacketV1_1.CODE">
	<summary>
 MarathonTP error code list
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.ResponseGenericPacketV1_1.EP">
	<summary>
 MarathonTP remote device end point
 </summary>
	<remarks>Defined by an address and a UDP port.</remarks>
</member><member name="T:Inertia.MFMarathon.UDPPackets.Answer.ResponseGenericPacketV1_1">
	<summary>
 Value writing answer definition.
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.DiscoverResponsePacketV1_1.VER">
	<summary>
 MarathonTP protocol version
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.DiscoverResponsePacketV1_1.RA">
	<summary>
 MarathonTP message type code
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.DiscoverResponsePacketV1_1.TNS">
	<summary>
 MarathonTP message transaction number
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.DiscoverResponsePacketV1_1.CMD">
	<summary>
 MarathonTP command type
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.DiscoverResponsePacketV1_1.CODE">
	<summary>
 MarathonTP error code list
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.DiscoverResponsePacketV1_1.TYP">
	<summary>
 MarathonTP element type
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.DiscoverResponsePacketV1_1.VALUE">
	<summary>
 MarathonTP element type
 </summary>
</member><member name="P:Inertia.MFMarathon.UDPPackets.Answer.DiscoverResponsePacketV1_1.EP">
	<summary>
 MarathonTP remote device end point
 </summary>
	<remarks>Defined by an address and a UDP port.</remarks>
</member><member name="T:Inertia.MFMarathon.UDPPackets.Answer.DiscoverResponsePacketV1_1">
	<summary>
 Discover request answer definition.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.ServerSocket">
	<summary>
 The server socket.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.rnd">
	<summary>
 Random number generator.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.intArrayLength">
	<summary>
 Sended message list length.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.intMessageList">
	<summary>
 List of sended message.
 </summary>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.AllowedDevice">
	<summary>
 List of allowed remote device.
 </summary>
	<remarks></remarks>
</member><member name="E:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.NewWritingResponse">
	<summary>
 Occurs when a writing response is returned.
 </summary>
	<param name="ErrorCode"></param>
</member><member name="E:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.NewReadingResponse">
	<summary>
 Occurs when value(s) is returned after a reading request.
 </summary>
	<param name="ReceivedValues"></param>
	<param name="ReferenceValues"></param>
	<param name="stamp"></param>
	<param name="EP"></param>
	<remarks></remarks>
</member><member name="E:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.NewDiscoverResponse">
	<summary>
 Occurs when Discover is returned.
 </summary>
	<param name="EP"></param>
	<remarks></remarks>
</member><member name="E:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.NewWritingRequest">
	<summary>
 Occurs when a value(s) writing is requested.
 </summary>
	<param name="Message"></param>
	<param name="RequestedValues"></param>
	<remarks></remarks>
</member><member name="E:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.NewReadingRequest">
	<summary>
 Occurs when value(s) is requested.
 </summary>
	<param name="Message"></param>
	<param name="RequestedValues"></param>
	<remarks></remarks>
</member><member name="E:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.NewDiscoverRequest">
	<summary>
 Occurs when Discover is requested.
 </summary>
	<param name="Message"></param>
	<remarks></remarks>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.PacketEnded">
	<summary>
 End of packet.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.UDPPacketstarted">
	<summary>
 Start of packet.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.c">
	<summary>
 Char datatype variable for internal use.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.PollOverride">
	<summary>
 Disable socket polling if true.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.isNetworkReady">
	<summary>
 Used to indicate the availabilty of the network.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.RecylingTimer">
	<summary>
 Message recycling timer.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.MessageStatTimer">
	<summary>
 Timer to evaluate protocol stats.
 </summary>
</member><member name="F:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.SuccessfulMessageCount">
	<summary>
 Used to keep tracking of successfully sended message.
 </summary>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.TNS">
	<summary>
 Actual message transaction number.
 </summary>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.DeviceIPAddress">
	<summary>
 Local device IP address.
 </summary>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.MessageTimeOut">
	<summary>
 Time before a message is considered lost.
 </summary>
	<remarks>Expressed in milliseconds. This property is application wide.</remarks>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.MessageRetries">
	<summary>
 Number of message retries before removing the message from the sended message queue. 
 </summary>
	<remarks>This property is application wide.</remarks>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.SendedMessageCount">
	<summary>
 Keep count of sended message. 
 </summary>
	<remarks>Count every message. With or without response. Automatically reset if value exceed 2,147,483,647.</remarks>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.ReceivedMessageCount">
	<summary>
 Keep count of received message.
 </summary>
	<remarks>Keep count of every received message. Good and bad one. Automatically reset if value exceed 2,147,483,647.</remarks>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.FailedMessageCount">
	<summary>
 Keep count of failed message.
 </summary>
	<remarks>A fail occur when no response is received for a specific message. Automatically reset if value exceed 2,147,483,647.</remarks>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.RetriedMessageCount">
	<summary>
 Keep count of retried message.
 </summary>
	<remarks>A retry occur when ne response is received after message timeout. Automatically reset if value exceed 2,147,483,647.</remarks>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.SuccessfulMessagePerSecond">
	<summary>
 Number of successfull message transcation per second.
 </summary>
	<remarks>This value is evaluated every second. Automatically reset if value exceed 2,147,483,647.</remarks>
</member><member name="P:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.FailedMessagePerSecond">
	<summary>
 Number of unsuccessfull message transaction per second.
 </summary>
	<remarks>This value is evaluated every second. Automatically reset if value exceed 2,147,483,647.</remarks>
</member><member name="M:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.IncrementTNS">
	<summary>
 Increments the value of the transaction number
 </summary>
	<remarks></remarks>
</member><member name="M:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.OnDataReceived(System.Byte[],System.Int32,System.Net.IPEndPoint)">
	<summary>
 Evaluate a CRC for the byte array received on the socket. If the calculated CRC equals the CRC provided in the byte array then the message parser is called.
 </summary>
	<param name="data"></param>
	<param name="length"></param>
</member><member name="M:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.SendMessage(System.Object)">
	<summary>
 Send a well formated MessageFrame to device at the specified IP Address.
 </summary>
	<param name="ObjectToSend"></param>
</member><member name="M:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.ReSendMessage(System.Object)">
	<summary>
 ReSend a well formated MessageFrame to device at the specified IP Address.
 </summary>
	<param name="ObjectToSend"></param>
</member><member name="M:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.MessageParser(System.String,System.Net.IPEndPoint)">
	<summary>
 Parse the message received into udpPacket variable.
 </summary>
	<param name="Message"></param>
	<remarks></remarks>
</member><member name="M:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.Close">
	<summary>
 Closes the Socket connection and releases all associated resources.
 </summary>
</member><member name="M:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.RecylingTimer_Tick(Gadgeteer.Timer)">
	<summary>
 Remove from message list unhandled message.
 </summary>
	<param name="timer"></param>
	<remarks></remarks>
</member><member name="M:Inertia.MFMarathon.NetworkInterface.MarathonUDPNetworkInterface.MessageStatTimer_Tick(Gadgeteer.Timer)">
	<summary>
 Occurs when stats timer tick.
 </summary>
	<param name="timer"></param>
	<remarks></remarks>
</member>
</members>
</doc>